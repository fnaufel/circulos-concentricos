---
title: Círculos concêntricos em R
subtitle: Classificação
author: "Fernando Náufel"
date: now
date-format: "DD/MM/YYYY HH:mm"
lang: pt

# bibliography: bibliography.bib
# csl: universidade-do-porto-faculdade-de-engenharia-chicago-pt-crono.csl

format:
  html:
    toc: true  
    toc-depth: 3
    number-depth: 3
    theme: 
      - journal
      - _custom.scss
    link-external-icon: true
    link-external-newwindow: true
    link-external-filter: ^(?:http:|https:)\/\/fnaufel\.github\.io
    df-print: paged
---

{{< include _math.qmd >}}

# Setup

```{r setup}
source('_setup.R')
```


# Gerar dados

```{r}
gerar_pontos <- function(
  n_classes = 3,
  largura = 3,
  dp_classe = .5,
  densidade_angulos = 60,
  seed = 12345
) {

  set.seed(seed)
  
  # Um raio para cada classe
  raios <- seq(largura, n_classes*largura, by = largura)
  
  # Mais ângulos para círculos com raios maiores
  angulos <- raios %>% 
    map(
      ~seq(0, 359, length.out = densidade_angulos * .x)
    )
  
  # classe vai de 0 a n_classes - 1
  df_pontos <- 0:(n_classes - 1) %>% 
    map2(
      angulos,
      ~expand_grid(classe = .x, angulo = .y)
    ) %>% 
    list_rbind()
  
  n_pontos <- nrow(df_pontos)
  
  df_pontos %>% 
    mutate(
      # classe vai de 0 a n_classes - 1
      raio = (classe + 1) * largura + rnorm(n_pontos, sd = dp_classe),
      classe = factor(classe),
      x1 = raio * cos(angulo * pi / 180),
      x2 = raio * sin(angulo * pi / 180)
    )

}
```

```{r}
n_classes <- 2

df_pontos <- gerar_pontos(n_classes = n_classes, largura = 3, seed = 123)

df_pontos %>% 
  ggplot() +
    geom_point(aes(x1, x2, color = classe), alpha = 0.7) +
    guides(color = 'none') +
    coord_fixed()
```


# Split

```{r}
divisao_inicial <- initial_split(df_pontos, strata = classe)
treino <- training(divisao_inicial)
teste <- testing(divisao_inicial)
```

# Keras

## Rede

```{r}
library(keras)
```

```{r}
n_hidden <- 4

rede <- keras_model_sequential() %>% 
  layer_dense(n_hidden, activation = 'relu', input_shape = 2) %>% 
  layer_dense(n_classes, activation = 'softmax')

rede
```

```{r}
rede %>% compile(
  optimizer = optimizer_rmsprop(),
  loss = loss_categorical_crossentropy(),
  metrics = list(metric_categorical_accuracy()),
)
```

## Treinar

```{r}
df2matrix <- function(df) {
  
  treino <- matrix(
    c(df$x1, df$x2),
    ncol = 2,
    dimnames = list(NULL, c('x1', 'x2'))
  )
  
  teste <- df$classe %>% to_categorical()
  
  list(treino, teste)
  
}
```

```{r}
c(treino_matriz, treino_targets) %<-% df2matrix(treino)
```

```{r}
historia <- rede %>% 
  fit(
    treino_matriz,
    treino_targets,
    batch_size = 256,
    epochs = 500,
    verbose = 0
  )
```

```{r}
plot(historia)
```


## Testar

```{r}
c(teste_matriz, teste_targets) %<-% df2matrix(teste)
```

```{r}
resultados <- rede %>% 
  evaluate(
    teste_matriz,
    teste_targets,
    batch_size = 256
  )
```

```{r}
resultados
```


## Treinar em tudo

```{r}
c(tudo_matriz, tudo_targets) %<-% df2matrix(df_pontos)
```

```{r}
rede %>% compile(
  optimizer = optimizer_rmsprop(),
  loss = loss_categorical_crossentropy(),
  metrics = list(metric_categorical_accuracy())
)
```

```{r}
historia <- rede %>% 
  fit(
    tudo_matriz,
    tudo_targets,
    batch_size = 256,
    epochs = 500,
    verbose = 0
  )
```

```{r}
plot(historia)
```


## Prever em tudo

```{r}
preds <- rede %>% 
  predict(
    tudo_matriz,
    batch_size = 256
  )
```

```{r}
df_preds <- preds %>% 
  as_tibble() %>% 
  rowwise() %>% 
  mutate(
    # classe vai de 0 a n_classes - 1
    .pred = which.max(c_across(starts_with('V'))) - 1
  ) %>% 
  ungroup() %>% 
  mutate(
    .pred = factor(.pred)
  )
```

```{r}
df_preds <- df_pontos %>% 
  cbind(df_preds)
```

```{r}
df_preds %>% 
  accuracy(classe, .pred)
```

```{r}
df_preds %>% 
  mutate(correto = classe == .pred) %>% 
  ggplot() +
    geom_point(aes(x1, x2, color = correto)) +
    scale_color_manual(values = c('red', 'lightgray')) +
    coord_fixed()
```

```{r}
plot_cores <- function(
  df,
  rede
) {
  
  minimo1 <- min(df$x1) %>% floor()
  minimo2 <- min(df$x2) %>% floor()
  maximo1 <- max(df$x1) %>% ceiling()
  maximo2 <- max(df$x2) %>% ceiling()
  
  grid <- expand_grid(
    x1 = seq(minimo1, maximo1, 0.1),
    x2 = seq(minimo2, maximo2, 0.1)
  )
  
  grid_matriz <- grid %>% 
    as.matrix()
  
  grid_classes <- rede %>% 
    predict(
      grid_matriz,
      batch_size = 1024
    ) %>% 
    as_tibble() %>% 
    rowwise() %>% 
    mutate(
      # classe vai de 0 a n_classes - 1
      .pred = which.max(c_across(starts_with('V'))) - 1
    ) %>% 
    ungroup() %>% 
    mutate(
      .pred = factor(.pred)
    )

  grid %>% 
    cbind(grid_classes) %>% 
    ggplot() +
      geom_point(
        aes(x1, x2, color = .pred),
        alpha = .2,
        size = .4
      ) +
      geom_point(
        data = df,
        aes(x1, x2, color = classe)
      ) +
      guides(color = 'none') +
      coord_fixed()
    
}
```

```{r}
plot_cores(df_pontos, rede)
```

# Pesos e equações

A rede tem a seguinte estrutura:

![](images/rn-2-4-2.png){fig-alt="rede" width=100% fig-align="center"}

